@page "/task/{action}/{id?}"

@using System.Text.Json
@using Newtonsoft.Json
@using TyzenR.Publisher.Shared
@using TyzenR.Taskman.Entity
@using TyzenR.Taskman.Managers

@inject ITaskManager taskManager
@inject IAppInfo appInfo
@inject NavigationManager navigation

<h3>@action Task</h3>

@if (showConfirmation)
{
    <div class="alert alert-success">
        Saved successfully!
    </div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

<EditForm Model="@item" OnValidSubmit="@Save">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row m-1">
        <label class="col-sm-2 " for="Title">Title:</label>
        <div class="col-sm-10">
            <InputText required id="Title" @bind-Value="item.Title" class="form-control" />
        </div>
    </div>

    <div class="form-group row m-1">
        <label class="col-sm-2 " for="Description">Description:</label>
        <div class="col-sm-10">
            <InputTextArea rows="10" required id="Description" @bind-Value="item.Description" class="form-control" />
        </div>
    </div>

    <div class="form-group row m-1">
        <label class="col-sm-2" for="Hours">Hours:</label>
        <div class="col-sm-4">
            <InputNumber id="Hours" @bind-Value="item.Hours" required class="form-control" />
        </div>

        <label class="col-sm-2" for="Points">Points:</label>
        <div class="col-sm-4">
            <InputNumber id="Points" @bind-Value="item.Points" required class="form-control" />
        </div>
    </div>

    <div class="form-group row m-1">
        <label class="col-sm-2 " for="Description">Assigned To:</label>
        <div class="col-sm-10">
            <InputSelect class="form-select" @bind-Value="item.AssignedTo" >
                @foreach (TeamMemberEntity member in teamMembers)
                {
                    if (member.Id == item.AssignedTo)
                    {
                        <option value="@member.Id" selected>
                            @member.Name
                        </option>
                    }
                    else
                    {
                        <option value="@member.Id" >
                            @member.Name
                        </option>
                    }  
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group row m-1">
        <button type="submit" disabled="@saving" class="col-sm-2 btn btn-primary">
            @(saving ? "loading ..." : "Save")
        </button>
        &nbsp; &nbsp;
        @if (action == "Edit")
        {
            if (item.Status == TaskStatusEnum.InProgress)
            {
                <button class="col-sm-2 btn btn-green" @onclick="@MarkAsCompleted" disabled="@saving">
                    Mark as Completed
                </button>
            }
            else if (item.Status == TaskStatusEnum.Completed)
            {
                <button class="col-sm-2 btn-teal" @onclick="@MarkAsInProgress" disabled="@saving">
                    Mark as InProgress
                </button>
            }
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public string action { get; set; }

    [Parameter]
    public string id { get; set; }

    public TaskEntity item = new TaskEntity();
    private bool showConfirmation = false;
    private bool saving = false;
    private string ErrorMessage = "";

    private IList<TeamMemberEntity> teamMembers = new List<TeamMemberEntity>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            teamMembers = await taskManager.GetTeamMembersAsync(appInfo.GetCurrentUser());

            if (action == "Add")
            {
                item = new TaskEntity();
                item.AssignedTo = appInfo.CurrentUserId;
            }
            else
            {
                try
                {
                    if (!string.IsNullOrEmpty(id))
                    {
                        item = await taskManager.GetByIdAsync(Guid.Parse(id));
                    }
                }
                catch (Exception ex)
                {
                    await SharedUtility.SendEmailToModeratorAsync("Taskman.TaskEdit.OnAfterRenderAsync.Exception", ex.ToString());
                    ErrorMessage = "An error has occurred!";
                }
            }
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        saving = true;
        ErrorMessage = "";

        item.Title = item.Title.Trim();
        item.Description = item.Description.Trim();

        try
        {
            if (string.IsNullOrEmpty(item.Title))
            {
                ErrorMessage = "Title is required!";
            }
            else if (string.IsNullOrEmpty(item.Description))
            {
                ErrorMessage = "Description is required!";
            }

            else // If valid
            {
                item.UpdatedBy = appInfo.CurrentUserId;
                item.UpdatedOn = DateTime.Now;
                item.UpdatedIP = appInfo.CurrentUserIPAddress;

                if (action == "Add")
                {
                    item.CreatedBy = appInfo.CurrentUserId;
                    item.Status = TaskStatusEnum.InProgress;

                    await taskManager.InsertAsync(item);
                    await taskManager.NotifyManagers(appInfo.GetCurrentUser(), item, "Taskman | Team Member New/Update Task");
                }
                else
                {
                    await taskManager.UpdateAsync(item);
                    await taskManager.NotifyManagers(appInfo.GetCurrentUser(), item, "Taskman | Team Member New/Update Task");
                }

                navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            await SharedUtility.SendEmailToModeratorAsync("Taskman.TaskEdit.Save", ex.ToString());
            ErrorMessage = "An error has occurred!";
        }
        saving = false;
    }

    private async Task MarkAsCompleted()
    {
        item.Status = TaskStatusEnum.Completed;

        await Save();

        await taskManager.NotifyManagers(appInfo.GetCurrentUser(), item, "Taskman | Team Member Task Completed");
    }

    private async Task MarkAsInProgress()
    {
        item.Status = TaskStatusEnum.InProgress;

        await Save();
    }
}
