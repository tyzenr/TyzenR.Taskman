@page "/task/{action}/{id?}"

@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using TyzenR.Publisher.Shared
@using TyzenR.Taskman.Entity
@using TyzenR.Taskman.Managers
@using TyzenR.Taskman.Web.Pages.Components

@inject ITaskManager taskManager
@inject IActionTrackerManager actionTrackerManager
@inject IAppInfo appInfo
@inject NavigationManager navigation

@attribute [Authorize]

<h3>@action Task</h3>

@if (showConfirmation)
{
    <div class="alert alert-success">
        Saved successfully!
    </div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

<EditForm Model="@item" OnValidSubmit="@Save">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row m-1">
        <label class="col-sm-2 " for="Title">Title:</label>
        <div class="col-sm-10">
            <InputText required id="Title" @bind-Value="item.Title" class="form-control" />
        </div>
    </div>

    <div class="form-group row m-1">
        <label class="col-sm-2 " for="Description">Description:</label>
        <div class="col-sm-10">
            <InputTextArea rows="10" required id="Description" @bind-Value="item.Description" class="form-control" />
        </div>
    </div>

    <div class="form-group row m-1">
        <label class="col-sm-2" for="Hours">Hours:</label>
        <div class="col-sm-4">
            <InputNumber id="Hours" @bind-Value="item.Hours" required class="form-control" />
        </div>

        <label class="col-sm-2" for="Points">Points:</label>
        <div class="col-sm-4">
            <InputNumber id="Points" @bind-Value="item.Points" required class="form-control" />
        </div>
    </div>

    <div class="form-group row m-1">
        <label class="col-sm-2 " for="Description">Assigned To:</label>
        <div class="col-sm-10">
            <InputSelect class="form-select" @bind-Value="item.AssignedTo">
                @foreach (MemberModel member in teamMembers)
                {
                    if (member.Id == item.AssignedTo)
                    {
                        <option value="@member.Id" selected>
                            @member.Name
                        </option>
                    }
                    else
                    {
                        <option value="@member.Id">
                            @member.Name
                        </option>
                    }
                }
            </InputSelect>
        </div>
    </div>

    <br />
    <div class="form-group row m-2">
        <label class="col-sm-2">Attachments:</label>
        <div class="col-sm-4">
            <div class="custom-file-input-wrapper">
                <label class="btn btn-secondary btn-sm" for="file-upload">Choose files</label>
                <InputFile id="file-upload" multiple OnChange="OnFilesSelected" style="display: none;" />
            </div>
            <div class="mt-2">
                @if (attachments != null && attachments.Any())
                {
                    <ul class="list-group">
                        @foreach (var attachment in attachments)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span class="attachment-name">@attachment.FileName</span>
                                <span>(@FormatSize(attachment.FileContent.Length))</span>
                                <button type="button" class="btn btn-light btn-sm" @onclick="() => RemoveAttachment(attachment)">
                                    X
                                </button>

                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No attachments found.</p>
                }
            </div>
        </div>
    </div>

    <div class="form-group row m-1">
        <button type="submit" disabled="@saving" class="col-sm-2 btn btn-primary">
            @(saving ? "loading ..." : "Save")
        </button>
        &nbsp; &nbsp;
        @if (action == "Edit")
        {
            if (item.Status == TaskStatusEnum.InProgress)
            {
                <button class="col-sm-2 btn btn-green" @onclick="@MarkAsCompleted" disabled="@saving">
                    Mark as Completed
                </button>
            }
            else if (item.Status == TaskStatusEnum.Completed)
            {
                <button class="col-sm-2 btn-teal" @onclick="@MarkAsInProgress" disabled="@saving">
                    Mark as InProgress
                </button>
            }
        }
    </div>
</EditForm>

<TaskHistory TaskId="@id" />

@code {
    [Parameter]
    public string action { get; set; }

    [Parameter]
    public string id { get; set; }

    public TaskEntity item = new TaskEntity();
    private bool showConfirmation = false;
    private bool saving = false;
    private string ErrorMessage = "";

    private IList<MemberModel> teamMembers = new List<MemberModel>();

    private List<TaskAttachmentEntity> attachments = new List<TaskAttachmentEntity>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            teamMembers = await taskManager.GetTeamMembersAsync(appInfo.GetCurrentUser());

            if (action == "Add")
            {
                item = new TaskEntity();
                item.AssignedTo = appInfo.CurrentUserId;
            }
            else
            {
                try
                {
                    if (!string.IsNullOrEmpty(id))
                    {
                        item = await taskManager.GetByIdAsync(Guid.Parse(id));

                        if (item != null)
                        {
                            await actionTrackerManager.TrackActionAsync(ActionTypeEnum.View, item);
                        }
                    }
                }
                catch (Exception ex)
                {
                    await SharedUtility.SendEmailToModeratorAsync("Taskman.TaskEdit.OnAfterRenderAsync.Exception", ex.ToString());
                    ErrorMessage = "An error has occurred!";
                }
            }
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        if (!saving)
        {
            saving = true;
            ErrorMessage = "";

            item.Title = item.Title.Trim();
            item.Description = item.Description.Trim();

            try
            {
                if (string.IsNullOrEmpty(item.Title))
                {
                    ErrorMessage = "Title is required!";
                }
                else if (string.IsNullOrEmpty(item.Description))
                {
                    ErrorMessage = "Description is required!";
                }

                else // If valid
                {
                    item.UpdatedBy = appInfo.CurrentUserId;
                    item.UpdatedOn = DateTime.Now;
                    item.UpdatedIP = appInfo.CurrentUserIPAddress;

                    await UploadAttachmentsToBlob();

                    if (action == "Add")
                    {
                        item.CreatedBy = appInfo.CurrentUserId;
                        item.Status = TaskStatusEnum.InProgress;
                        item.Attachments = attachments;

                        var result = await taskManager.InsertAsync(item);

                        if (result != null)
                        {
                            await actionTrackerManager.TrackActionAsync(ActionTypeEnum.Add, result);
                        }
                    }
                    else
                    {
                        bool success = await taskManager.UpdateAsync(item);

                        if (success)
                        {
                            await actionTrackerManager.TrackActionAsync(actionType, item);
                        }
                    }

                    navigation.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                await SharedUtility.SendEmailToModeratorAsync("Taskman.TaskEdit.Save", ex.ToString());
                ErrorMessage = "An error has occurred!";
            }
            saving = false;
        }
    }

    private async Task UploadAttachmentsToBlob()
    {
        foreach (var attachment in attachments)
        {
            if (attachment.FileContent != null && !string.IsNullOrEmpty(attachment.FileName) && string.IsNullOrEmpty(attachment.BlobUri))
            {
                using var stream = new MemoryStream(attachment.FileContent);

                string contentType = FileExtensions.GetMimeTypeFromUrl(attachment.FileName);
                attachment.BlobUri = await taskManager.UploadAttachmentToBlobAsync(stream, attachment.FileName, contentType);
            }
        }
    }

    private ActionTypeEnum actionType = ActionTypeEnum.Edit;

    private async Task MarkAsCompleted()
    {
        item.Status = TaskStatusEnum.Completed;
        actionType = ActionTypeEnum.Complete;

        await Save();

        await taskManager.NotifyManagersAsync(appInfo.GetCurrentUser(), item, "Taskman | Team Member Task Completed");
    }

    private async Task MarkAsInProgress()
    {
        item.Status = TaskStatusEnum.InProgress;
        actionType = ActionTypeEnum.InProgress;

        await Save();
    }

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        const int maxAllowedFiles = 5;
        const long maxFileSize = 1024 * 1024 * 10; // 10 MB

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (file.Size > maxFileSize)
            {
                ErrorMessage = $"File {file.Name} is too large. Max file size is 10MB.";
                continue;
            }

            try
            {
                using var stream = new MemoryStream();
                await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
                attachments.Add(new TaskAttachmentEntity { FileName = file.Name, FileContent = stream.ToArray() });
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error uploading file {file.Name}: {ex.Message}";
            }
        }

        StateHasChanged();
    }

    private void RemoveAttachment(TaskAttachmentEntity attachment)
    {
        attachments.Remove(attachment);
        StateHasChanged();
    }

    private long TotalAttachmentsSize()
    {
        return attachments.Sum(a => a.FileContent.Length);
    }

    private string FormatSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} bytes";
        if (bytes < 1024 * 1024) return $"{bytes / 1024.0:F2} KB";

        return $"{bytes / (1024.0 * 1024.0):F2} MB";
    }
}
