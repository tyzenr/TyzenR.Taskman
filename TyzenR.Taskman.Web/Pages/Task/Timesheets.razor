@page "/timesheets"

<PageTitle>Timesheet Report</PageTitle>

@using Microsoft.AspNetCore.Authorization
@using TyzenR.EntityLibrary;
@using TyzenR.Taskman.Entity
@using TyzenR.Taskman.Managers;
@using TyzenR.Publisher.Shared;

@inject ITaskManager taskManager
@inject IActionTrackerManager actionTrackerManager
@inject IJSRuntime JsRuntime
@inject IAppInfo appInfo
@inject EntityContext context

@attribute [Authorize]

<PageTitle>Timesheets Report</PageTitle>
<h1>Tasks</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

<div class="text-center" style=" display: flex; align-items: center; gap: 10px; margin-left:400px">
    <NavLink class="btn btn-success" @onclick="RefreshDataAsync">
        <i class="fa-solid fa-plus m-1"></i> Refresh
    </NavLink>
</div>
<table class="table">
    <thead>
        <tr>
            <th class="pointer">Title</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in list)
        {
            <tr>
                <td>@task.Title  </td>
            </tr>
        }
    </tbody>
</table>

<style>
    .pointer:hover {
        cursor: pointer;
    }
</style>

@code {
    private IList<TaskEntity> list = new List<TaskEntity>();

    private string ErrorMessage = "";

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var user = appInfo.GetCurrentUser();
            // Load people to dropdown

        }
        catch (Exception ex)
        {
            await SharedUtility.SendEmailToModeratorAsync("Taskman.Report.OnInitializedAsync", ex.ToString());
        }
    }

    private async Task RefreshDataAsync()
    {
        ErrorMessage = string.Empty;

        try
        {
            // Search

        }
        catch (Exception ex)
        {
            await SharedUtility.SendEmailToModeratorAsync("Taskman.Tasks.RefreshDataAsync", ex.ToString());
        }

        StateHasChanged();
    }
}