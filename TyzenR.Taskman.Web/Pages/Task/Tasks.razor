@page "/"

<PageTitle>Tasks</PageTitle>

@using TyzenR.EntityLibrary;
@using TyzenR.Taskman.Entity
@using TyzenR.Taskman.Managers;
@using TyzenR.Publisher.Shared;

@inject ITaskManager taskManager
@inject IJSRuntime JsRuntime
@inject IAppInfo appInfo
@inject EntityContext context

<PageTitle>Tasks</PageTitle>
<h1>Tasks</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

<div class="text-center" style=" display: flex; align-items: center; gap: 10px; margin-left:400px">
    <NavLink class="btn btn-success" href="@("task/Add")">
        <i class="fa-solid fa-plus m-1"></i> Add
    </NavLink>

    <div style="margin-top:15px;">
        <TyzenR.Taskman.Web.Shared.Pagination TotaPagesQuantity="totalPages" CurrentPage="currentPage" Radius="2"
                                              SelectedPage="OnSelectedPage">
        </TyzenR.Taskman.Web.Shared.Pagination>
    </div>
</div>
<table class="table">
    <thead>
        <tr>
            <th class="pointer" @onclick="@(() => Sort("Title"))">Title</th>
            <th class="pointer" @onclick="@(() => Sort("Action"))">Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in list)
        {
            <tr>
                <td>@task.Title  </td>
                <td>@task.Status  </td>
                <td class="text-center">
                    <NavLink class="btn btn-warning m-1" href="@("task/Edit/" + task.Id)">
                        <i class="fa-solid fa-edit m-1"></i> Edit
                    </NavLink>
                    <NavLink class="btn btn-danger m-1" @onclick="@((e) => DeleteItem(task))" href="javascript:void(0)">
                        <i class="fa-solid fa-trash m-1"></i> Delete
                    </NavLink>
                </td>
            </tr>
        }
    </tbody>
</table>

<style>
    .pointer:hover {
        cursor: pointer;
    }
</style>

@code {
    private IList<TaskEntity> list = new List<TaskEntity>();

    private string ErrorMessage = "";
    private Guid currentlySending;
    private int totalPages = 1, currentPage = 1;
    private string sortBy = "CreatedOn";
    private SortDirection sortDirection = SortDirection.Descending;

    [SupplyParameterFromQuery]
    [Parameter]
    public int page { get; set; } = 1;

    protected async override Task OnInitializedAsync()
    {
        await RefreshDataAsync();
    }

    private async Task RefreshDataAsync(int page = 1, int pageSize = 10)
    {
        ErrorMessage = string.Empty;

        try
        {
            var user = appInfo.GetCurrentUser();
            if (user != null)
            {

                var query = this.context.Tasks
                    .Where(t => (t.Status == TaskStatusEnum.InProgress || t.Status == TaskStatusEnum.Completed) && (t.CreatedBy == user.Id || t.AssignedTo == user.Id));

                totalPages = (query.Count() / pageSize) + 1;
                list = await taskManager.GetPaginatedTasksForUserAsync(query, page, pageSize, sortBy, sortDirection);
            }
        }
        catch (Exception ex)
        {
            await SharedUtility.SendEmailToModeratorAsync("Taskman.Tasks.RefreshDataAsync", ex.ToString());
        }

        StateHasChanged();
    }

    private async Task DeleteItem(TaskEntity item)
    {
        ErrorMessage = "";
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "You are about to delete this item?");
        if (confirmed)
        {
            try
            {
                await taskManager.DeleteAsync(item);

                await taskManager.NotifyManagers(appInfo.GetCurrentUser(), item, "Taskman | Team Member Deleted Task");

                await RefreshDataAsync();
            }
            catch (Exception ex)
            {
                await SharedUtility.SendEmailToModeratorAsync("Taskman.Tasks.DeleteItem", ex.ToString());
                ErrorMessage = "An error has occurred!";
            }
        }
    }

    private async Task OnSelectedPage(int page)
    {
        currentPage = page;

        await RefreshDataAsync(page);
    }

    private async Task Sort(string sortBy)
    {
        this.sortBy = sortBy;
        sortDirection = (sortDirection == SortDirection.Ascending) ? SortDirection.Descending : SortDirection.Ascending;

        await RefreshDataAsync();
    }
}