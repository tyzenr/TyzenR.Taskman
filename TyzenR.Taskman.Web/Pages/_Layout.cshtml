@using Microsoft.AspNetCore.Components.Web
@namespace TyzenR.Taskman.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="TyzenR.Taskman.Web.styles.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">
    <link href="/plugins/fontawesome/css/fontawesome.css" rel="stylesheet">
    <link href="_content/Syncfusion.Blazor/styles/bootstrap5.css" rel="stylesheet" />
    <link href="_content/Blazored.Modal/blazored.modal.css" rel="stylesheet" />
    <link href="/plugins/fontawesome/css/brands.css" rel="stylesheet">
    <link href="/plugins/fontawesome/css/solid.css" rel="stylesheet">
</head>
<body>
    @RenderBody()
    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
    <script src="_content/Syncfusion.Blazor.Core/scripts/syncfusion-blazor.min.js" type="text/javascript"></script>
    <script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>
    <script src="_content/Blazored.Modal/blazored-modal.js"></script>
    <script src="_framework/blazor.server.js"></script>

    <script>
        function downloadFile(fileName, data, fileType) {
            let blob;

            if (fileType === 'csv') {
                blob = new Blob([data], { type: 'text/csv;charset=utf-8;' });
            } else if (fileType === 'pdf') {
                blob = new Blob([new Uint8Array(data)], { type: 'application/pdf' });
            } else {
                console.error('Unsupported file type');
                return;
            }

            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);
            link.setAttribute('download', fileName);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);

            link.click();

            document.body.removeChild(link);

            URL.revokeObjectURL(url);
        }

    </script>

</body>
</html>