@page "/task/{action}/{id?}"

@page "/Plan/{action}/{id?}"

@using TyzenR.Publisher.Shared
@using TyzenR.Taskman.Entity
@using TyzenR.Taskman.Managers

@inject ITaskManager manager
@inject NavigationManager _Navigation

<h3>@action Task</h3>

@if (showConfirmation)
{
    <div class="alert alert-success">
        Saved successfully!
    </div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

<EditForm Model="@Plan" OnValidSubmit="@Save">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row m-1">
        <label class="col-sm-2 " for="Name">Name:</label>
        <div class="col-sm-10">
            <InputText required id="Name" @bind-Value="item.Title" class="form-control" />
        </div>
    </div>

    <div class="form-group row m-1">
        <label class="col-sm-2 " for="Period">Default Period (In Days):</label>
        <div class="col-sm-10">
            <InputNumber required id="Period" @bind-Value="item.Description" class="form-control" />
        </div>
    </div>
    <br />


    <div class="form-group row m-1">
        <button type="submit" disabled="@submitLoading" class="col-sm-2 btn btn-primary">
            @(submitLoading ? "loading ..." : "Save")
        </button>
    </div>
</EditForm>



@code {
    [Parameter]
    public string action { get; set; }

    [Parameter]
    public string id { get; set; }

    public TaskEntity item;
    private bool showConfirmation = false;
    private bool submitLoading = false;

    private string ErrorMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (action == "Add")
            {
                item = new TaskEntity();
            }
            else
            {
                try
                {
                    if (!string.IsNullOrEmpty(id))
                    {
                        item = await manager.GetByIdAsync(Guid.Parse(id));
                    }
                }
                catch (Exception ex)
                {
                    await SharedUtility.SendEmailToModertorAsync("Publisher.PlanForm.OnAfterRenderAsync", ex.ToString());
                    ErrorMessage = "An error has occurred!";
                }

            }
            StateHasChanged();
        }

    }

    private async Task Save()
    {
        submitLoading = true;
        ErrorMessage = "";
        try
        {
            if (await manager.IsValid(item))
            {
                if (action == "Add")
                {
                    await manager.CreatePlanAsync(item);
                }
                else
                {
                    await manager.UpdateAsync(item);
                }
                showConfirmation = true;
                _Navigation.NavigateTo("/Plans");
            }
            else
            {
                ErrorMessage = "Plan with the same name already exists!";
            }


        }
        catch (Exception ex)
        {
            await SharedUtility.SendEmailToModertorAsync("Taskman.TaskEdit.Save", ex.ToString());
            ErrorMessage = "An error has occurred!";

        }
        submitLoading = false;
    }
}
