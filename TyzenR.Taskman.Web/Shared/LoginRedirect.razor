@using System.Web
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Options
@using TyzenR.Account
@using TyzenR.Account.Common

@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]

@inject NavigationManager _navigationManager
@inject IJSRuntime JS
@inject IConfiguration configuration
@inject IOptions<AppSettings> settings

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private static System.Security.Claims.ClaimsPrincipal _user { get; set; }

    protected async override Task OnInitializedAsync()
    {
        AppSettings appSettings = settings.Value;
        if (!string.IsNullOrEmpty(appSettings.AccountUrl))
        {
            var loginUrl = $"{appSettings.AccountUrl}/{ApplicationEnum.Publisher.ToString()}";

            var ReturnUrl = appSettings.PublisherUrl;

            var Url = $"{loginUrl}?redirectUrl={ReturnUrl}";

            // Navigate User To Login Page if Not Authenticated
            _user = (await authenticationStateTask).User;

            if (_user != null)
                if (!_user.Identity.IsAuthenticated)
                {
                    _navigationManager.NavigateTo(Url, true);
                }
        }
    }
}